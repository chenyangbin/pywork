# 工程目录：c:\Users\bin\OneDrive\share\pywork\day08面向对象和过程\01面向对象.py
# 创建日期: 2019.03.18
# 工程目标：面向对象 和 面向过程
# 创建作者：binyang
# -*- coding:utf-8 -*-


# 面向对象 更加抽象
    #调用对象  不关注细节 只关注需要的功能
    #面向对象，是对面向过程的封装
    #找到对象，确定对象的属性和行为
        #面向对象解决问题步骤
            #1列举一个任务的具体 实现步骤
            #2分离实现步骤的功能代码块
            #3将功能块，划分到某个具体的实现功能对象中
            #4更具这个对象对应的行为，抽象出类，设计类

   #设计类：类是某个具体的对象的抽象 提取出具体对象的特点，特性类
        #类的作用：
                #根据抽象的特点，生成具体的对象
        #类的组成：
                #名称
                #属性 各种本身的特点
                #方法 各种本身的技能

    #类和对象的关系：对象可以抽取特点，抽取出某个类，类可以 具体化出一个实例对象


     #对象自己的自由 特点叫属性，


# 面向过程 更加具体 关心每一步的具体过程
    #主要内容是分解解决问题的实现步骤，
'''
面向对象技术简介
类(Class):      用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。
方法：          类中定义的函数。
类变量：        类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。
数据成员：      类变量或者实例变量用于处理类及其实例对象的相关的数据。
方法重写：      如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。方法是类中定义的函数，技能
局部变量：      定义在类中函数的方法中的变量，只作用于当前实例的类。当前具体的对象
实例变量：      在类的声明中，属性（自己的特点）是用变量来表示的。这种变量就称为实例变量，是在类声明的内部但是在类的其他成员方法之外声明的。
继承：          即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。
                例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟"是一个（is-a）"关系（例图，Dog是一个Animal）。
实例化：        创建一个类的实例，类的具体对象。
对象：          通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。

和其它编程语言相比，Python 在尽可能不增加新的语法和语义的情况下加入了类机制。
Python中的类提供了面向对象编程的所有基本功能：类的继承机制允许多个基类，派生类可以覆盖基类中的任何方法，方法中可以调用基类中的同名方法。

对象可以包含任意数量和类型的数据。
'''